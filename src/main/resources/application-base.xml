<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" 
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/context/spring-aop.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/context/spring-tx.xsd">
	<!-- xsi:schemaLocation="http://www.springframework.org/schema/beans -->
	<!-- 装载属性配置文件 -->		
	<bean id="propertyConfig" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations" value="classpath:jdbc.properties">
	<!--   <list>
				<value>classpath:jdbc.properties</value>
			</list>
	-->
		</property>
	</bean>
	
	<!-- 配置数据源 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="${jdbc.driverClassName}"/>
		<property name="url" value="${jdbc.url}"/>
		<property name="username" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}"/>
	</bean>
	
	<!-- 配置SessionFactory -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<!--  
		<property name="configLocation" value="classpath:hibernate.cfg.xml"></property>
		-->
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hbm2ddl.auto">update</prop>
				<prop key="format_sql">true</prop>
			</props>
		</property>
		<property name="mappingResources">
			<list>
				<value>com/somnus/bean/Book.hbm.xml</value>
			</list>
		</property>
	</bean>
	
	<!-- 配置事务管理器-->
	
	<bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="dataSource" ref="dataSource"/>
		<property name="sessionFactory">
			<ref bean="sessionFactory"/>
		</property>	
	</bean>
	
	<!-- 配置事务的传播特性 1propagation 2read-only 3isoloation 4timeout 5rollbackFor 6rollbackForClassname 7NorollbackFor 8NorollbackForClassname
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="*" read-only="true" />
		</tx:attributes>
	</tx:advice>-->
	
	<bean id="logInterceptor" class="com.somnus.core.aop.LogInterceptor"></bean>
	
	<!-- 配置哪些方法参与事务 
	<aop:config>
		<aop:pointcut id="allMethod" expression="execution(* service.*.*(..))"/>
		
		<aop:advisor pointcut-ref="allMethod" advice-ref="txAdvice"/>
		
		<aop:aspect id="logAspect" ref="logInterceptor">
			<aop:before method="before" pointcut="execution(public * service..*.*(..))" />
										 这里可以用 pointcut-ref="allMethod"
		</aop:aspect>
		
	</aop:config>-->
	
	
	<bean id="transactionInterceptor"
		class="org.springframework.transaction.interceptor.TransactionInterceptor">
		<!--  事务拦截器bean需要依赖注入一个事务管理器 -->
		<property name="transactionManager">
			<ref bean="transactionManager" />
		</property>
		<property name="transactionAttributes">
			<!--  下面定义事务传播属性-->
			<props>
				<prop key="*">readOnly</prop>
				<prop key="add*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="save*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="modify*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="update*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="delete*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="remove*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="query*">PROPAGATION_REQUIRED, readOnly,-Exception</prop>
				<prop key="load*">PROPAGATION_REQUIRED, -Exception</prop>
			</props>
		</property>
	</bean>

	<!-- 自动代理 -->
	<bean id="autoproxy"
		class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
		<!-- 可以是Service或DAO层（最好是针对业务层*Service） -->
		<property name="beanNames">
			<list>
				<value>*Service</value><!--下面是所有需要自动创建事务代理的bean 所有以service结尾的都会创建事务代理-->
			</list>
		</property>
		<property name="interceptorNames">
			<list>
				<value>transactionInterceptor</value>
			</list>
		</property>
	</bean>
	
	
	<!-- 定义mongo对象，相关ip地址和端口 -->
    <!-- <mongo:mongo host="localhost" port="27017" />
    mongo工厂，通过它来取得mongo实例 
    <mongo:db-factory dbname="demo" />
    
    <bean id="mappingContext" class="org.springframework.data.mongodb.core.mapping.MongoMappingContext"></bean>

    <bean id="defaultMongoTypeMapper"  class="org.springframework.data.mongodb.core.convert.DefaultMongoTypeMapper">
        <constructor-arg name="typeKey" value="null" />
    </bean>

    MongoMappingConverter类起到实体映射的作用，通过注释把java类转换为mongodb的文档。
    <bean id="mappingMongoConverter" class="org.springframework.data.mongodb.core.convert.MappingMongoConverter">
        <constructor-arg name="mongoDbFactory" ref="mongoDbFactory" />
        <constructor-arg name="mappingContext" ref="mappingContext" />
        <property name="typeMapper" ref="defaultMongoTypeMapper" />
    </bean>

    mongodb的主要操作对象，所有对mongodb的增删改查的操作都是通过它完成
    <bean id="mongoTemplate" class="org.springframework.data.mongodb.core.MongoTemplate">
        <constructor-arg name="mongoDbFactory" ref="mongoDbFactory" />
        <constructor-arg name="mongoConverter" ref="mappingMongoConverter" />
    </bean>
	
	<bean id="mongodao" class="com.somnus.dao.BaseMongoDaoImpl">   
        <property name="mongoTemplate" ref="mongoTemplate"></property>   
    </bean>
    
    <bean id="bookMongoService" class="com.somnus.service.BookMongoServiceImpl">   
        <property name="mongodao" ref="mongodao"></property>   
    </bean> -->
       
</beans>
